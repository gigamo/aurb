#!/usr/bin/env ruby
require 'rubygems'

module Aurb

DlPath = File.join(File.expand_path('~'), 'abs') # Change me!
Config = Struct.new :search, :info, :sync, :dir

def self.aur
  @aur ||= Aur.new
end

module Util
  # Colorize a string
  #
  #   color('Text', :green)
  #
  # For a full list of available effects, see
  # http://facets.rubyforge.org/doc/api/more/classes/ANSICode.html
  def color text, effect
    require 'facets/ansicode' unless defined? ANSICode

    ANSICode.send(effect.to_sym) << text << ANSICode.clear
  end
end

class AurbError < Exception; end

class Aur
  include Aurb::Util

  def initialize
    require 'pathname'

    @config = Config.new(
      'http://aur.archlinux.org/rpc.php?type=search&arg=%s',
      'http://aur.archlinux.org/rpc.php?type=info&arg=%s',
      '/var/lib/pacman/sync/community',
      Pathname.new(DlPath).realpath
    )
    @opts = Opts.new(ARGV)
  end

  def start
    trap(:INT) { exit 0 } # Exit peacefully on *INT

    # Evaluate a command in string form
    # Example: instance_eval('search("package")')
    # Which will invoke the search method
    instance_eval @opts[:cmd]
  rescue AurbError => e
    $stderr.puts e.message
    exit 1
  end

  # Downloads +packages+
  #
  #   download('awesome-git', 'aurb')
  #
  def download *packages
    packages.each do |package|
      list(package).each do |names|
        if names.first == package
          if in_sync? package
            puts "#{color('==>', :yellow)} Found #{package} in community repo. Pacman!"
            exec "sudo pacman -S #{package}"
          else
            Dir.chdir(@config.dir) do
              fetch package
              untar package
            end
          end
        end
      end
    end
  end

  # Searches for +package+
  #
  #   search('awesome')
  #
  def search package
    count, threads = 0, []

    list(package).each do |names|
      threads << Thread.new do
        result = json(@config.info % names[1])

        unless result['type'] == 'error'
          result = result['results']
          next if in_sync? result['Name']

          if package.any? do |pac| # Check both name and description for matches
            (result['Name'].include?(pac)) || (result['Description'].include?(pac))
          end
            count += 1
            puts "[#{result['OutOfDate'] == '1' ? color('✘', :red) : color('✔', :green)}] \
#{color(result['Name'], :blue)} (#{result['Version']}): #{result['Description']}"
          end
        end
      end
    end
    threads.each { |t| t.join }

    puts "\n#{color('==>', :yellow)} Found #{color(count.to_s, :magenta)} \
#{count == 1 ? 'result' : 'results'}"
  end

  # Checks the aur for upgrades to local packages that were not found in any
  # official repository.
  #
  def check_upgrade
    count, upgradable = 0, []

    `pacman -Qm`.each_line do |line|
      name, version = line.chomp.split
      result = json(@config.info % name)

      unless result['type'] == 'error'
        result = result['results']

        if (result.is_a?(Hash)) && (result['Version'] != version)
          require 'facets/version'

          if VersionNumber.new(result['Version']) > VersionNumber.new(version)
            count += 1
            upgradable << name

            puts "#{color(name, :blink)} (#{color(version, :red)}) \
can be upgraded to #{color(result['Version'], :green)}"
          end
        else
          puts "#{color(name, :bold)} (#{color(version, :green)}) is up to date"
        end
      end
    end

    puts "\n#{color('==>', :yellow)} Found #{color(count.to_s, :magenta)} \
#{count == 1 ? 'upgrade' : 'upgrades'}"

    unless upgradable.empty?
      require 'highline'

      upgradable.each do |pkg|
        answer = ask("#{color('==>', :yellow)} Download #{pkg}? ") { q.validate /[a-zA-Z]/ }
        answer =~ /^y|yes$/i ? download(pkg) : next
      end
    end
  end

private
  # Checks if a package exists in the community repository
  #
  #   in_sync?('awesome-git')
  #
  def in_sync? package
    !!Dir["#{@config.sync}/#{package}-*"].first
  end

  # Returns a list of packages found by a search
  #
  #   list('awesome-git')
  #
  def list package
    require 'cgi'

    info, list = json(@config.search % CGI::escape(package)), []

    if info['type'] == 'error'
      raise AurbError, "#{color('Fatal', :on_red)}: no results"
    end

    info['results'].each do |result|
      list << [result['Name'], result['ID']]
    end

    list.sort
  end

  # Downloads given +package+ into +dir+
  #
  #   fetch('awesome-git', $0.dirname)
  #
  def fetch package
    File.delete("#{package}.tar.gz")) if File.exists?("#{package}.tar.gz")

    open("http://aur.archlinux.org/packages/#{package}/#{package}.tar.gz") do |remote|
      File.open("#{package}.tar.gz", 'wb') do |local|
        local.write(remote.read)
      end
    end

    puts "#{color('==>', :yellow)} Fetched #{package}.tar.gz"
  end

  # Untars +package+
  #
  #   untar('awesome-git') #=> .tar.gz is automagically appended
  #
  def untar package
    require 'facets/minitar'
    require 'zlib'
    require 'fileutils'

    FileUtils.rm_r(package, :verbose => true) if File.directory?(package)

    Archive::Tar::Minitar.unpack(
      Zlib::GzipReader.new(File.open("#{package}.tar.gz", 'rb')), Dir.pwd
    )

    puts "#{color('==>', :yellow)} Untarred #{package}.tar.gz"
  end

  # Shortcut to parsing json
  #
  #   json('http://foo.bar')
  #
  def json item
    require 'json'
    require 'open-uri'

    JSON.parse(open(item).read)
  end
end

class Opts < Hash
  def initialize(args = ARGV)
    @@args = args.empty? ? ['-h'] : args
    parse
  end

private
  def parse
    require 'optparse'

    OptionParser.new do |o|
      o.version      = [0, 5, 6].join('.')
      o.program_name = 'Aurb'
      o.release      = '2009-04-13'

      o.on('-D', '--download P1,P2,...', Array, "Download package(s).") do |d|
        self[:cmd] = "download('#{d*"', '"}')"
      end
      o.on('-S', '--search PKG', 'Search for a package.') do |s|
        self[:cmd] = "search('#{s}')"
      end
      o.on('-U', '--upgrade', 'Check the AUR for upgrades.') do
        self[:cmd] = 'check_upgrade'
      end
    end.parse! @@args
  end
end

end

at_exit do
  if __FILE__ == $0
    raise $! if $!
    Aurb.aur.start
  else
    $stderr.puts 'Please only run me by myself. Thanks.'
    exit 1
  end
end
