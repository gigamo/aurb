#!/usr/bin/env ruby
#++
# Copyright (C) 2009 Gigamo
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#--
# Inspired by arson (http://evaryont.github.com/arson)

[
  'getoptlong',
  'pathname',
  'fileutils',
  'zlib',
  'open-uri',
  'rubygems',
  'json',
  'highline/import',
  'facets/ansicode',
  'facets/minitar',
  'facets/version',
].each do |lib|
  begin
    require lib
  rescue LoadError
    abort <<ERR
Couldn't load '#{lib}'.
Please make sure you have the necessary rubygems installed.
ERR
  end
end

module Aurb
# Default download path
  DlPath = File.join ENV['HOME'], 'abs'

# Program info
  PrInfo = {:name => 'Aurb', :version => [0, 8, 2].join('.'), :release => '2009-05-04'}

  class << self
    def start
      Aur.exec_action \
        :rpc => proc {|type, arg| "http://aur.archlinux.org/rpc.php?type=#{type}&arg=#{arg}"}
    end
  end

  module Util
    def set_trap
      trap :INT do
        $stderr.puts "\nInterrupt signal received\n\n"
        exit 0
      end
    end

    def ansi text, effect
      text = ANSICode.send(effect.to_sym) << text.to_s << ANSICode.clear if @config[:color]
      text
    end

    def yes_or_no? question
      ask question, lambda {|yn| yn.downcase[0] == ?y} do |q|
        q.readline              = true
        q.validate              = /\Ay(?:es)?|no?\Z/i
        q.responses[:not_valid] = 'Yes or no, please'
      end
    end
  end

  class Aur
    include Aurb::Util

    def self.exec_action config # Aur.exec_action
      new config
      set_trap

      @opts.cmd.each do |cmd|
        instance_eval cmd
        $stdout.puts "\n\n" unless cmd == @opts.cmd.last
      end
    end

    def initialize config
      @opts   = Opts.get_opts
      @config = config.merge(@opts.config)
    end

    def download packages
      packages = packages.split unless packages.is_a?(Array)
      packages.delete_if {|pkg| in_sync?(pkg)}
      abort 'ERROR: No package(s) to download. Possibly the package(s) you ' +
        'specified was/were found in the community repository?' if packages.empty?

      say "Targets (#{ansi packages.length, :magenta}): #{packages.join(', ')}"
      if yes_or_no? 'Proceed? [yn] '
        packages.each do |package|
          begin
            FileUtils.cd @config[:path] do
              fetch package
              untar package
            end
          rescue OpenURI::HTTPError => e
            $stderr.puts "Something went wrong downloading '#{package}'. Are you sure it exists?\n" +
              "#{e.message}"
            package == packages.last ? exit : next
          end
          $stdout.puts "(#{packages.index(package)+1}/#{packages.length}) downloaded #{package}"
        end
      end
    end

    def search packages
      packages = packages.split  # FIXME: Shouldnt need to iterate over an array to search for multiple packages
      packages.each do |package| #        Can pass multiple keywords to list() instead?
        list(package).each do |name|
          result = json @config[:rpc]['info', name.last]
          unless result['type'] =~ /error/
            result = result['results']
            next if in_sync? result['Name']
            if package.any? {|pac| result['Name'].include?(pac) || result['Description'].include?(pac)}
              $stdout.puts "[#{result['OutOfDate'] == '1' ? ansi('✘', :red) : ansi('✔', :green)}] " +
                "#{ansi result['Name'], :blue} (#{result['Version']})\n    #{result['Description']}"
            end
          end
        end
      end
    end

    def check_upgrade
      upgradable ||= []
      IO.popen('pacman -Qm', IO::RDONLY) {|pm| pm.read.lines}.each do |line|
        name, version = line.chomp.split
        result = json @config[:rpc]['info', name]
        unless result['type'] =~ /error/
          result = result['results']
          next if in_sync? result['Name']
          if VersionNumber.new(result['Version']) > VersionNumber.new(version)
            upgradable << result['Name']
            $stdout.puts "> #{name}: #{ansi version, :red} => #{ansi result['Version'], :green}"
          end
        end
      end
      upgradable.any? ? ($stdout.puts; download upgradable) : ($stdout.puts 'Nothing to update')
    end

  private
    def in_sync? package
      !!Dir["/var/lib/pacman/sync/community/#{package}-*"].first
    end

    def list package
      list, info = [], json(@config[:rpc]['search', URI.escape(package)])
      unless info['type'] =~ /error/
        info['results'].each do |result|
          list << [result['Name'], result['ID']]
        end
      end
      list.sort
    end

    def fetch package
      open "http://aur.archlinux.org/packages/#{package}/#{package}.tar.gz" do |remote|
        File.open "#{package}.tar.gz", 'wb' do |local|
          local.write remote.read
        end
      end
    end

    def untar package
      Archive::Tar::Minitar.unpack \
        Zlib::GzipReader.new(File.open("#{package}.tar.gz", 'rb')),
        Dir.pwd

      FileUtils.rm "#{package}.tar.gz"
    end

    def json item
      JSON.parse open(item).read
    end
  end

  class Opts
    attr_reader :config, :cmd

    def self.get_opts
      @config = {:path => DlPath, :color => true}
      @cmd  ||= []

      parse!
      self
    end

  private
    def parse!
      ARGV.unshift '-h' if ARGV.empty?
      gopts = GetoptLong.new \
        ['--download', '-d',        GetoptLong::REQUIRED_ARGUMENT],
        ['--search', '-s',          GetoptLong::REQUIRED_ARGUMENT],
        ['--upgrade', '-u',         GetoptLong::NO_ARGUMENT],
        ['--no-color',              GetoptLong::NO_ARGUMENT],
        ['--path',                  GetoptLong::OPTIONAL_ARGUMENT],
        ['--version', '-v',         GetoptLong::NO_ARGUMENT],
        ['--help', '-h',            GetoptLong::NO_ARGUMENT]

      gopts.each do |opt, arg|
        case opt
        when '--download' then @cmd << "download '#{arg}'"
        when '--search'   then @cmd << "search '#{arg}'"
        when '--upgrade'  then @cmd << 'check_upgrade'
        when '--no-color' then @config[:color] = false
        when '--path'     then
          if File.exists? arg = (arg[0...1] == '/' ? arg : File.join(Dir.pwd, arg))
            @config[:path] = Pathname.new(arg).realpath
          else
            warn "WARN: '#{arg}' does not exist. Fell back to [#{@config[:path]}]\n"
          end
        when '--version' then $stderr.puts '%s %s (%s)' %
          [
            :name, :version, :release
          ].map {|key| PrInfo[key]}
          exit -1
        when '--help'    then print_help
        end
      end

      def print_help out = $stderr
        out.puts <<-HELP
Aurb - An AUR utility written in Ruby.

Usage:
  #{File.basename $0} [options]

Options (Required):
  -d, --download PACKAGE      Download a package.
  -s, --search PACKAGE        Search for package(s).
  -u, --upgrade               Search for package updates.

Optional:
      --no-color              Disable colored output.
      --path [PATH]           Override the default save path. [#{@config[:path]}]

Other:
      --version               Show version and exit.
      --help                  This message.

Examples:
  #{File.basename $0} -d 'package1 package2' --path ~/downloads
  #{File.basename $0} -s 'package1 package2' --no-color
  #{File.basename $0} --upgrade

You can also chain commands, like so:

  #{File.basename $0} -d 'thispackage' -s 'thatpackage' -u

Aurb was inspired by arson. Do have a look at http://evaryont.github.com/arson
For further information you can contact the author at <gigamo@gmail.com>.
        HELP
        exit -1
      end
    rescue GetoptLong::Error; exit 2
    end
  end
end

at_exit do
  if __FILE__ == $0
    raise $! if $!
    Aurb.start
  end
end

__END__

=head1 NAME

Aurb - An AUR utility written in Ruby

=head1 SYNOPSIS

  aurb --help

=head1 DESCRIPTION

Aurb is a small AUR utility written in Ruby. It can download and search for packages,
and search the AUR for updates to local packages. Run aurb -h for more information.

=head1 AUTHOR

Gigamo <lt>gigamo at gmail dot com<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2009 Gigamo

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

=cut
