#!/usr/bin/env ruby
#++
# Copyright (C) 2009 Gigamo
#
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
#--
# Inspired by arson (http://evaryont.github.com/arson)

%w[optparse pathname fileutils zlib open-uri rubygems json highline/import
   facets/ansicode facets/minitar facets/version].each {|lib| require lib}

module Aurb
# Default download path
  DlPath = File.join ENV['HOME'], 'abs'

# Program info
  PrInfo = {:name => 'Aurb', :version => [0, 7, 2].join('.'), :release => '2009-04-24'}

  class << self
    def aur
      @aur ||= Aur.new \
        :rpc => proc {|t, a| "http://aur.archlinux.org/rpc.php?type=#{t}&arg=#{a}"}
    end
  end

  module Util
    def set_trap
      trap(:INT) {abort "\nInterrupt signal received\n\n"}
    end

    def ansi text, effect
      text = ANSICode.send(effect.to_sym) << text.to_s << ANSICode.clear if @config[:color]
      text
    end

    def yes_or_no? question
      ask question, lambda {|yn| yn.downcase[0] == ?y} do |q|
        q.readline              = true
        q.default               = 'y'
        q.validate              = /\Ay(?:es)?|no?\Z/i
        q.responses[:not_valid] = 'Yes or no, please'
      end
    end
  end

  class Aur
    include Aurb::Util

    def initialize config
      @opts   = Opts.new
      @config = config.merge(@opts.config)
    end

    def start
      set_trap
      instance_eval @opts.cmd
    end

    def download *packages
      packages = packages.first if packages.first.is_a?(Array)
      packages.delete_if {|pkg| in_sync?(pkg)}
      abort 'FATAL: No package(s) to download. Possibly the package(s) you ' +
        'specified was/were found in the community repository?' if packages.empty?
      say "Targets (#{ansi packages.length, :magenta}): #{packages.join(', ')}"

      if yes_or_no? 'Proceed? '
        packages.each do |package|
          begin
            FileUtils.cd @config[:path] do
              fetch package
              untar package
            end
          rescue OpenURI::HTTPError
            say "Something went wrong downloading '#{package}'. Are you sure it exists?"
            package == packages.last ? exit : next
          end

          say "(#{packages.index(package)+1}/#{packages.length}) downloaded #{package}"
        end
      end
    end

    def search package
      list(package).each do |names|
        result = json @config[:rpc]['info', names.last]

        unless result['type'] =~ /error/
          result = result['results']
          next if in_sync? result['Name']

          if package.any? {|pac| result['Name'].include?(pac) || result['Description'].include?(pac)}
            say "[#{result['OutOfDate'] == '1' ? ansi('✘', :red) : ansi('✔', :green)}] " +
              "#{ansi result['Name'], :blue} (#{result['Version']})\n    #{result['Description']}"
          end
        end
      end
    end

    def check_upgrade
      upgradable = []
      say 'Searching for updates'

      IO.popen('pacman -Qm', IO::RDONLY) {|pm| pm.read.lines}.each do |line|
        name, version = line.chomp.split
        result = json @config[:rpc]['info', name]

        unless result['type'] =~ /error/
          result = result['results']
          next if in_sync? result['Name']

          if VersionNumber.new(result['Version']) > VersionNumber.new(version)
            upgradable << result['Name']
            say " #{name}: #{ansi version, :red} => #{ansi result['Version'], :green}"
          end
        end
      end

      upgradable.any? ? (say "\n"; download upgradable) : say('Nothing to update')
    end

  private
    def in_sync? package
      !!Dir["/var/lib/pacman/sync/community/#{package}-*"].first
    end

    def list package
      info, list = json(@config[:rpc]['search', URI.escape(package)]), []

      unless info['type'] =~ /error/
        info['results'].each do |result|
          list << [result['Name'], result['ID']]
        end
      end

      list.sort
    end

    def fetch package
      open "http://aur.archlinux.org/packages/#{package}/#{package}.tar.gz" do |remote|
        File.open "#{package}.tar.gz", 'wb' do |local|
          local.write remote.read
        end
      end
    end

    def untar package
      abort "FATAL: #{package}.tar.gz not found for untar" \
        unless File.exists? "#{package}.tar.gz" # This should never, ever happen. Just in case.

      Archive::Tar::Minitar.unpack \
        Zlib::GzipReader.new(File.open("#{package}.tar.gz", 'rb')),
        Dir.pwd
    end

    def json item
      JSON.parse open(item).read
    end
  end

  class Opts
    attr_reader :cmd, :config

    def initialize
      @@args  = ARGV.any? ? ARGV : ['-h']
      @config = {:path => DlPath, :color => true}
    # Parse zeh ARGV!
      parse!
    end

  private
    include Aurb::Util

    def parse!
      OptionParser.new do |o|
        o.program_name, o.version, o.release = \
          [:name, :version, :release].map {|key| PrInfo[key]}

        o.separator 'Actions (Required):'
        o.on '-D', '--download PKG1,PKG2,...', Array, 'download package(s)' do |d|
          @cmd = "download('#{d*"', '"}')" # XXX: Ugly! Makes instance_eval work though.
        end
        o.on '-S', '--search PKG', 'search for a package' do |s|
          @cmd = "search('#{s}')"
        end
        o.on '-U', '--upgrade', 'check the AUR for upgrades' do
          @cmd = 'check_upgrade'
        end
        o.separator 'Optional:'
        o.on '--path PATH', "download path [#{@config[:path]}]" do |d|
          if File.exists? d = (d[0...1] == '/' ? d : File.join(Dir.pwd, d))
            @config[:path] = Pathname.new(d).realpath
          else
            warn "WARN: The path you specified doesn't exist. Falling back to [#{@config[:path]}]\n"
          end
        end
        o.on '--[no-]color', "use colors?   [#{@config[:color] ? 'yes' : 'no'}]" do |c|
          @config[:color] = c
        end
      end.parse! @@args
    rescue OptionParser::ParseError
      abort $!.message 
    end
  end
end

at_exit do
  if __FILE__ == $0
    raise $! if $!
    Aurb.aur.start
  end
end

__END__

=head1 NAME

Aurb - A Ruby AUR Utility

=head1 SYNOPSIS

  aurb

=head1 DESCRIPTION

Aurb is a small AUR utility written in Ruby. It can download and search for packages,
and search the AUR for updates to local packages. Run aurb -h for more information.

=head1 AUTHOR

Gigamo <lt>gigamo at gmail dot com<gt>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2009 Gigamo

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

=cut
